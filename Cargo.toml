# [package] 区域定义了您的 crate（也就是您的 Rust 项目/库）的基本信息。
# The [package] section defines basic information about your crate (your Rust project/library).
[package]
# crate 的名称，发布到 crates.io 或作为依赖项时使用。
# The name of the crate, used when publishing to crates.io or as a dependency.
name = "seal-crypto"
# crate 的版本号，遵循语义化版本（Semantic Versioning）规范。
# The version number of the crate, following Semantic Versioning.
version = "0.1.5"
# 指定项目使用的 Rust edition。
# Specifies the Rust edition used by the project.
edition = "2024"
# 项目作者列表。
# A list of the project's authors.
authors = ["ShaoG-R <admin@GlorYouth.com>"]
# 项目的简短描述。
# a short description of the project.
description = "A crate providing pure cryptographic capability abstractions (traits) and implementations for the seal-kit ecosystem."
# 项目的许可证。
# The project's license.
license = "MPL-2.0"
# 指向项目 README 文件的路径。
# The path to the project's README file.
readme = "README.md"
# 项目的代码仓库 URL。
# The URL of the project's code repository.
repository = "https://github.com/ShaoG-R/seal-crypto"
# 项目的主页 URL。
# The URL of the project's homepage.
homepage = "https://github.com/ShaoG-R/seal-crypto"
# 项目的文档 URL。
# The URL of the project's documentation.
documentation = "https://docs.rs/seal-crypto"
# 在 crates.io 上用于搜索的关键字，有助于他人发现您的 crate。
# Keywords used for searching on crates.io, helping others discover your crate.
keywords = ["cryptography", "trait", "kem", "signature", "aead"]
# 在 crates.io 上的分类，有助于组织和查找。
# Categories on crates.io, used for organization and discoverability.
categories = ["cryptography"]

[package.metadata.docs.rs]
# 指示 docs.rs 在构建文档时启用 `full` 特性。
# Instructs docs.rs to build documentation with the `full` feature enabled.
features = ["full"]

# [dependencies] 区域列出了项目所依赖的所有外部 crate。
# The [dependencies] section lists all the external crates that the project depends on.
[dependencies]
# --- 加密后端 ---
# 这些是实际的加密算法实现库。它们是可选的，可以通过下面的 [features] 来启用。
# --- Cryptography Backends ---
# These are the actual cryptographic algorithm implementation libraries. They are optional and can be enabled via the [features] section below.
base64 = { version = "0.22.1", optional = true, default-features = false }
rsa = { version = "0.9.8", optional = true, default-features = false }
pqcrypto-kyber = { version = "0.8.1", optional = true, default-features = false }
aes-gcm = { version = "0.10.3", optional = true, default-features = false, features = ["aes", "getrandom", "alloc"] }
sha2 = { version = "0.10.9", optional = true, default-features = false } # RSA-PSS dependency / RSA-PSS 依赖
sha3 = { version = "0.10.8", optional = true, default-features = false }
chacha20poly1305 = { version = "0.10.1", optional = true, default-features = false, features = ["getrandom", "alloc"] }
pqcrypto-dilithium = { version = "0.5.0", optional = true, default-features = false }
elliptic-curve = { version = "0.13.8", optional = true, default-features = false }
ecdsa = { version = "0.16.9", optional = true, features = ["der"], default-features = false }
p256 = { version = "0.13.2", optional = true, default-features = false }
ed25519-dalek = { version = "2.2.0", optional = true, default-features = false }
signature = { version = "2.2.0", optional = true, default-features = false }
digest = { version = "0.10.7", optional = true, default-features = false }
hkdf = { version = "0.12.4", optional = true, default-features = false }
hmac = { version = "0.12.1", optional = true, default-features = false }
pbkdf2 = { version = "0.12.2", optional = true, default-features = false }
argon2 = { version = "0.5.3", optional = true, default-features = false }

# --- 辅助 Crates ---
# 这些 crate 提供了一些通用的辅助功能。
# --- Helper Crates ---
# These crates provide general helper functionalities.
thiserror = { version = "2.0.12", optional = true } # 用于方便地定义错误类型。 / For easily defining error types.
pqcrypto-traits = { version = "0.3.5", optional = true, default-features = false } # 后量子密码学算法所需的 traits。 / Traits required for post-quantum cryptography algorithms.
rand_core = { version = "0.9.3", default-features = false } # 随机数生成器所需的核心 traits。 / Core traits for random number generators.
rand_core_elliptic_curve = { package = "rand_core", version = "0.6.4", optional = true, default-features = false }
zeroize = { version = "1.8.1", features = ["derive", "alloc"], default-features = false } # 用于从内存中安全地擦除敏感数据（如密钥）。/ For securely wiping sensitive data (like keys) from memory.
secrecy = { version = "0.10.3", optional = true, default-feature = false }
getrandom = { version = "0.3.3", optional = true, default-feature = false }
serde = { version = "1.0.219", optional = true, default-features = false }

# [features] 区域允许您定义条件编译的标志。
# 这对于提供可选功能、支持不同环境（如 `std` vs `no_std`）或配置依赖项非常有用。
# The [features] section allows you to define flags for conditional compilation.
# This is very useful for providing optional functionality, supporting different environments (like `std` vs `no_std`), or configuring dependencies.
[features]
# --- 环境特性 ---
# `std` 特性默认启用，为项目提供标准库支持。
# 对于 `no_std` 环境，需要禁用默认特性来编译。
# --- Environment Features ---
# The `std` feature is enabled by default, providing standard library support for the project.
# For `no_std` environments, you need to disable default features to compile.
std = [
    "rand_core/std",
    "zeroize/std",
    "dep:thiserror",
]

# --- 默认特性 ---
# 当用户不指定任何特性时，默认启用的特性集。
# --- Default Features ---
# The set of features that are enabled by default when a user doesn't specify any.
default = ["std"]

# serde 特性用于序列化/反序列化。
# serde feature is used for serialization/deserialization.
serde = ["dep:serde", "zeroize/serde", "rsa/serde"]

# --- 算法原语特性 ---
# 第一级：单个算法特性。启用这些特性会引入对应的加密算法实现。
# "dep:" 语法表示这是一个可选依赖。
# --- Algorithm Primitive Features ---
# Level 1: Individual algorithm features. Enabling these brings in the corresponding crypto algorithm implementations.
# The "dep:" syntax indicates an optional dependency.
rsa-default = ["dep:rsa", "rsa/getrandom", "sha2"]
rsa = ["rsa/std", "rsa-default", "std"]
no-std-rsa = ["rsa-default"]

kyber-default = ["dep:pqcrypto-kyber", "dep:pqcrypto-traits"]
kyber = ["kyber-default", "pqcrypto-kyber/std", "std"]
no-std-kyber = ["kyber-default"]

dilithium-default = ["dep:pqcrypto-dilithium", "dep:pqcrypto-traits"]
dilithium = ["dilithium-default", "pqcrypto-dilithium/std", "pqcrypto-traits/std", "std"]
no-std-dilithium = ["dilithium-default"]

aes-gcm-default = ["dep:aes-gcm"]
aes-gcm = ["aes-gcm/std", "aes-gcm-default", "std"]
no-std-aes-gcm = ["aes-gcm-default"]

chacha20-poly1305-default = ["dep:chacha20poly1305"]
chacha20-poly1305 = ["chacha20poly1305/std", "chacha20-poly1305-default", "std"]
no-std-chacha20poly1305 = ["chacha20-poly1305-default"]

sha2 = ["dep:sha2", "digest"]

ecc-default = [
    "dep:elliptic-curve",
    "dep:ecdsa",
    "dep:p256",
    "dep:ed25519-dalek",
    "dep:signature",
    "dep:rand_core_elliptic_curve",
    "p256/alloc",
    "p256/arithmetic",
    "p256/ecdsa",
    "p256/pkcs8",
    "ed25519-dalek/pkcs8",
    "rand_core_elliptic_curve/getrandom",
]
ecc = [
    "elliptic-curve/std",
    "ecdsa/std",
    "p256/std",
    "ed25519-dalek/std",
    "signature/std",
    "ecc-default",
    "std"
]
no-std-ecc = ["ecc-default", "ed25519-dalek/alloc"]

ecdh-default = [
    "dep:elliptic-curve",
    "dep:p256",
    "dep:rand_core_elliptic_curve",
    "elliptic-curve/ecdh",
    "elliptic-curve/pkcs8",
    "elliptic-curve/arithmetic",
    "p256/ecdh",
    "p256/pkcs8",
    "rand_core_elliptic_curve/getrandom",
]
ecdh = ["ecdh-default", "elliptic-curve/std", "p256/std", "rand_core_elliptic_curve/std", "std"]
no-std-ecdh = [
    "ecdh-default",
    "elliptic-curve/alloc",
]
getrandom = ["dep:getrandom"]

hmac-default = ["dep:hmac"]
hmac = ["hmac/std", "hmac-default", "std"]
no-std-hmac = ["hmac-default"]

hkdf-default = ["dep:hkdf", "sha2", "hmac-default", "getrandom"]
hkdf = ["hkdf/std", "hmac/std", "hkdf-default", "hmac", "std"]
no-std-hkdf = ["hkdf-default"]

secrecy = ["dep:secrecy"]

kdf-base = ["getrandom"]
kdf-std-base = ["getrandom/std"]

pbkdf2-default = ["dep:pbkdf2", "sha2", "pbkdf2/hmac", "secrecy", "kdf-base", "getrandom"]
pbkdf2 = ["pbkdf2/std", "pbkdf2-default", "std", "kdf-std-base"]
no-std-pbkdf2 = ["pbkdf2-default"]

argon2-default = ["dep:argon2", "dep:base64", "secrecy", "kdf-base", "getrandom"]
argon2 = ["argon2/std", "argon2-default", "std", "kdf-std-base"]

digest = ["dep:digest", "digest/alloc"]
digest-std = ["digest/std", "digest"]

shake-default = ["dep:sha3", "digest"]
shake = ["shake-default", "sha3/std", "digest-std", "std", "kdf-base"]
no-std-shake = ["shake-default", "digest", "kdf-std-base"]

# --- 算法集特性 ---
# 第二级：为常用算法组合提供的便捷特性。
# --- Algorithm Set Features ---
# Level 2: Convenience features for common combinations of algorithms.
classic = ["rsa", "aes-gcm", "chacha20-poly1305", "ecc", "ecdh"] # 经典加密算法集 / Classic cryptographic algorithms set
no-std-classic = ["no-std-rsa", "no-std-aes-gcm", "no-std-chacha20poly1305", "no-std-ecc"]

pqc = ["kyber", "dilithium"] # 后量子密码学算法集 / Post-Quantum Cryptography algorithms set
no-std-pqc = ["no-std-kyber", "no-std-dilithium"]

kdf = ["hkdf", "pbkdf2", "sha2", "argon2"]
no-std-kdf = ["no-std-hkdf", "no-std-pbkdf2"]

xof = ["shake"]
no-std-xof = ["no-std-shake"]

# --- 硬件加速特性 ---
# 为特定算法启用硬件加速。
# --- Hardware Acceleration Features ---
# Enable hardware acceleration for specific algorithms.
# AVX2 features for post-quantum algorithms
kyber-avx2 = ["pqcrypto-kyber/avx2"]
dilithium-avx2 = ["pqcrypto-dilithium/avx2"]

# ASM features for various algorithms (Note: may not be Windows-compatible)
sha2-asm = ["sha2/sha2-asm", "sha2/asm"]
sha2-asm-aarch64 = ["sha2/asm-aarch64"]
sha2-loongarch64-asm = ["sha2/loongarch64_asm"]
sha3-asm = ["sha3/asm"]
ecc-asm = ["ed25519-dalek/asm"]
shake-asm = ["sha3/asm"]
# --- 完整特性 ---
# 第三级：`full` 特性激活所有可用的算法实现。
# --- Full Feature ---
# Level 3: The `full` feature activates all available algorithm implementations.
full = ["classic", "pqc", "kdf", "xof", "serde"]
no-std-full = ["no-std-classic", "no-std-pqc", "no-std-kdf", "serde"]

# [[example]] 区域用于定义项目的示例代码。
# 每个示例都可以有自己所需的特性。
# The [[example]] section is used to define example code for the project.
# Each example can have its own required features.
[[example]]
# 数字签名示例，需要 `rsa` 特性。
# Digital signature example, requires the `rsa` feature.
name = "digital_signature"
required-features = ["rsa"]

[[example]]
# 混合加密示例，需要 `kyber` 和 `aes-gcm` 特性。
# Hybrid encryption example, requires `kyber` and `aes-gcm` features.
name = "hybrid_encryption"
required-features = ["kyber", "aes-gcm"]

[[example]]
# KDF 示例，需要 `kdf` 特性。
# KDF example, requires `kdf` feature.
name = "kdf"
required-features = ["kdf"]

[[example]]
# XOF 示例, 需要 `shake` 特性.
# XOF example, requires `shake` feature.
name = "xof"
required-features = ["shake"]

[[example]]
# README 示例，需要 `rsa` 特性.
# README example, requires the `rsa` feature.
name = "readme"
required-features = ["rsa"]

[dev-dependencies]
criterion = { version = "0.7.0", features = ["html_reports"] }
hex = "0.4.3"

[[bench]]
name = "crypto_benches"
harness = false 

[lints.clippy]
unwrap_used = "deny"
expect_used = "deny"